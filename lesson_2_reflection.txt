What happens when you initialize a repository? Why do you need to do it?

-- Git will create a new, hidden .git file in the repository, which enables git to start tracking local changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?

-- A resting place for individual changes before launching a commit. 

How can you use the staging area to make sure you have one commit per logical change?

-- Git can bundle multiple changes in the staging area into one commit to the repo, makes creating meaningful commits from a series of small changes possible.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

-- When developing new feature(s) on top of the base code. New branches makes making big code changes easy without messing the working base code.

How do the diagrams help you visualize the branch structure?

-- The directions of the arrows shows which commits within the branches are traceable from which.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

-- The two branches now share a common commit, and from that commit on all previous commits made in both branches are tracable.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

-- Automatic merging makes it easy to combine changes made to different parts of the file. Manual merging is required when the same part(s) in both versions of a file is changed, in that case a merge conflict will arise and the final changes to the file need to be determined manually.